services:
  frontend:
    build:
      context: ${REPOS_DIR:-./repos}/pizzamaker-fe
      dockerfile: deployments/Dockerfile
      cache_from:
        - frontend:latest
    image: frontend:latest
    ports:
      - "${PIZZAMAKER_FE_PORT:-3000}:80"
    depends_on:
      - recipe-manager
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  recipe-manager:
    build:
      context: ${REPOS_DIR:-./repos}/recipe-manager
      dockerfile: deployments/Dockerfile
      cache_from:
        - recipe-manager:latest
    image: recipe-manager:latest
    ports:
      - "${RECIPE_MANAGER_PORT:-8080}:8080"
    environment:
      CALCULATOR_ADDR: calculator:50051
      INGREDIENTS_BALANCER_ADDR: ingredients-balancer:50052
      CONFIG_PATH: /app/configs
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_DBNAME: pizzamaker
      DATABASE_USER: user
      DATABASE_PASSWORD: pizzamaker
      LOG_LEVEL: ${LOG_LEVEL:-info}
      OTEL_SERVICE_NAME: recipe-manager
      OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4318
    depends_on:
      mysql:
        condition: service_healthy
      jaeger:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ingredients-balancer:
    build:
      context: ${REPOS_DIR:-./repos}/ingredients-balancer
      dockerfile: deployments/Dockerfile
      cache_from:
        - ingredients-balancer:latest
    image: ingredients-balancer:latest
    ports:
      - "${INGREDIENTS_BALANCER_PORT:-50052}:50052"
      - "${INGREDIENTS_BALANCER_HTTP_PORT:-8081}:8081"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      OTEL_SERVICE_NAME: ingredients-balancer
      OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4318
    depends_on:
      jaeger:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 50052 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  calculator:
    build:
      context: ${REPOS_DIR:-./repos}/calculator
      dockerfile: deployments/Dockerfile
      cache_from:
        - calculator:latest
    image: calculator:latest
    ports:
      - "${CALCULATOR_PORT:-50051}:50051"
      - "${CALCULATOR_HTTP_PORT:-9090}:8080"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      OTEL_SERVICE_NAME: calculator
      OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4318
    depends_on:
      jaeger:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 50051 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: pizzamaker
      MYSQL_USER: user
      MYSQL_PASSWORD: pizzamaker
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "--password=pizzamaker"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - mysql_data:/var/lib/mysql
      - ${REPOS_DIR:-./repos}/recipe-manager/migrations:/docker-entrypoint-initdb.d
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']

  jaeger:
    image: jaegertracing/all-in-one:1.60
    container_name: jaeger
    restart: on-failure
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_OTLP_HTTP_PORT: 4318
      COLLECTOR_OTLP_GRPC_PORT: 4317
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
      - "${JAEGER_OTLP_GRPC_PORT:-4317}:4317"
      - "${JAEGER_OTLP_HTTP_PORT:-4318}:4318"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    restart: on-failure
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    depends_on:
      recipe-manager:
        condition: service_healthy
      calculator:
        condition: service_started
      ingredients-balancer:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: on-failure
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: localhost
      GF_LOG_LEVEL: info
      GF_LOG_MODE: console
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

volumes:
  mysql_data:
  prometheus_data:
  grafana_data:
